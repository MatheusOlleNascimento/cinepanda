plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin" // O Plugin Flutter Gradle deve ser aplicado após os plugins Android e Kotlin.
}

android {
    namespace = "cc.monow.cine_panda"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    // Carregar propriedades do arquivo key.properties
    def keyPropertiesFile = rootProject.file("key.properties")
    def keyProperties = new Properties()
    if (keyPropertiesFile.exists()) {
        keyProperties.load(new FileInputStream(keyPropertiesFile))
    } else {
        println "Arquivo key.properties não encontrado!"
    }

    signingConfigs {
        release {
            if (keyProperties['storeFile'] && keyProperties['storePassword'] && keyProperties['keyAlias'] && keyProperties['keyPassword']) {
                storeFile file(keyProperties['storeFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            } else {
                println "Uma ou mais propriedades estão faltando no key.properties"
            }
        }
    }

    defaultConfig {
        applicationId = "com.cc.monow.cine_panda"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true // Ativa a minimização de código
            shrinkResources true // Permite a remoção de recursos não utilizados
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}
